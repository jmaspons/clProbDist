/* This file is part of clProbDist.
 *
 * Copyright 2015-2016  Pierre L'Ecuyer, Universite de Montreal and Advanced Micro Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Authors:
 *
 *   Nabil Kemerchou <kemerchn@iro.umontreal.ca>    (2015)
 *   David Munger <mungerd@iro.umontreal.ca>        (2015)
 *   Pierre L'Ecuyer <lecuyer@iro.umontreal.ca>     (2015)
 *
 */

/*! @file lognormal.clh
 *  @brief Device-side API for the lognormal distribution
 *
 *  In the function declarations of this file, the preprocessor symbol
 *  _CLPROBDIST_LOGNORMAL_OBJ_MEM expands to the selected memory type for
 *  this distribution type.
 */

#pragma once
#ifndef LOGNORMALDIST_CLH
#define LOGNORMALDIST_CLH

#include "clProbDist.clh"
#include "continuous.clh"
#include "normal.clh"

#ifndef CLPROBDIST_LOGNORMAL_OBJ_MEM
/*! @brief Type of memory to store lognormal distribution objects
 *
 *  Defaults to @ref CLPROBDIST_MEM_TYPE_GLOBAL.
 *
 *  @see CLPROBDIST_MEM_TYPE_PRIVATE CLPROBDIST_MEM_TYPE_LOCAL CLPROBDIST_MEM_TYPE_CONSTANT CLPROBDIST_MEM_TYPE_GLOBAL.
 */
#define CLPROBDIST_LOGNORMAL_OBJ_MEM CLPROBDIST_MEM_TYPE_GLOBAL
#endif

#if CLPROBDIST_LOGNORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_PRIVATE
  #define _CLPROBDIST_LOGNORMAL_OBJ_MEM
#elif CLPROBDIST_LOGNORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_LOCAL
  #define _CLPROBDIST_LOGNORMAL_OBJ_MEM __local
#elif CLPROBDIST_LOGNORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_GLOBAL
  #define _CLPROBDIST_LOGNORMAL_OBJ_MEM __global
#elif CLPROBDIST_LOGNORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_CONSTANT
  #define _CLPROBDIST_LOGNORMAL_OBJ_MEM __constant
#else
  #error Invalid value for CLPROBDIST_LOGNORMAL_OBJ_MEM
#endif

/*! @brief Lognormal distribution object [**device**]
*
*  A structure that represents a lognormal distribution object.
*/
typedef struct _clprobdistlLognormal clprobdistLognormal;


/*! @name Functions for use with a distribution object
*
* @{
*/

/*! @copydoc clprobdistDensityWithObject()
*/
double clprobdistLognormalDensityWithObject(_CLPROBDIST_LOGNORMAL_OBJ_MEM const clprobdistLognormal* dist, double x, clprobdistStatus* err);

/*! @copydoc clprobdistCDFWithObject()
*/
double clprobdistLognormalCDFWithObject(_CLPROBDIST_LOGNORMAL_OBJ_MEM const clprobdistLognormal* dist, double x, clprobdistStatus* err);

/*! @copydoc clprobdistComplCDFWithObject()
*/
double clprobdistLognormalComplCDFWithObject(_CLPROBDIST_LOGNORMAL_OBJ_MEM const clprobdistLognormal* dist, double x, clprobdistStatus* err);

/*! @copydoc clprobdistInverseCDFWithObject()
*/
double clprobdistLognormalInverseCDFWithObject(_CLPROBDIST_LOGNORMAL_OBJ_MEM const clprobdistLognormal* dist, double u, clprobdistStatus* err);

/*! @copydoc clprobdistMeanWithObject()
*/
double clprobdistLognormalMeanWithObject(_CLPROBDIST_LOGNORMAL_OBJ_MEM const clprobdistLognormal* dist, clprobdistStatus* err);

/*! @copydoc clprobdistVarianceWithObject()
*/
double clprobdistLognormalVarianceWithObject(_CLPROBDIST_LOGNORMAL_OBJ_MEM const clprobdistLognormal* dist, clprobdistStatus* err);

/*! @copydoc clprobdistStdDeviationWithObject()
*/
double clprobdistLognormalStdDeviationWithObject(_CLPROBDIST_LOGNORMAL_OBJ_MEM const clprobdistLognormal* dist, clprobdistStatus* err);

/*! @brief Return the scale parameter.
*
*  @param[in]  dist    Distribution object.
*  @param[out] err     Error status variable, or \c NULL.
*  @return Scale parameter \f$\mu\f$.
*/
double clprobdistLognormalGetMu(_CLPROBDIST_LOGNORMAL_OBJ_MEM const clprobdistLognormal* dist, clprobdistStatus* err);

/*! @brief Return the shape parameter.
*
*  @param[in]  dist    Distribution object.
*  @param[out] err     Error status variable, or \c NULL.
*  @return Shape parameter \f$\sigma\f$.
*/
double clprobdistLognormalGetSigma(_CLPROBDIST_LOGNORMAL_OBJ_MEM const clprobdistLognormal* dist, clprobdistStatus* err);

/*! @} */

/*! @name Functions for use with explicit distribution parameters
*
*  @{
*/

/*! @brief @copybrief clprobdistDensity()
*
*  @see clprobdistLognormalDensityWithObject()
*
*  @param[in]  mu	Value of the scale parameter \f$\mu\f$.
*  @param[in]  sigma	Value of the shape parameter \f$\sigma\f$.
*  @param[in]  x       Value of \f$x\f$.
*  @param[out] err     Error status variable, or \c NULL.
*  @return     Value of \f$f(x)\f$.
*/
double clprobdistLognormalDensity(double mu, double sigma, double x, clprobdistStatus* err);

/*! @brief @copybrief clprobdistCDF()
*
*  @see clprobdistLognormalCDFWithObject()
*
*  @param[in]  mu	Value of the scale parameter \f$\mu\f$.
*  @param[in]  sigma	Value of the shape parameter \f$\sigma\f$.
*  @param[in]  x       Value of \f$x\f$.
*  @param[out] err     Error status variable, or \c NULL.
*  @return     Value of \f$F(x)\f$.
*/
double clprobdistLognormalCDF(double mu, double sigma, double x, clprobdistStatus* err);

/*! @brief @copybrief clprobdistComplCDF()
*
*  @see clprobdistLognormalComplCDFWithObject()
*
*  @param[in]  mu	Value of the scale parameter \f$\mu\f$.
*  @param[in]  sigma	Value of the shape parameter \f$\sigma\f$.
*  @param[in]  x       Value of \f$x\f$.
*  @param[out] err     Error status variable, or \c NULL.
*  @return     Value of \f$\bar F(x)\f$.
*/
double clprobdistLognormalComplCDF(double mu, double sigma, double x, clprobdistStatus* err);

/*! @brief @copybrief clprobdistInverseCDF()
*
*  @see clprobdistLognormalInverseCDFWithObject()
*
*  @param[in]  mu	Value of the scale parameter \f$\mu\f$.
*  @param[in]  sigma	Value of the shape parameter \f$\sigma\f$.
*  @param[in]  u       Value of \f$u \in [0,1]\f$.
*  @param[out] err     Error status variable, or \c NULL.
*  @return     Value of \f$F^{-1}(u)\f$.
*/
double clprobdistLognormalInverseCDF(double mu, double sigma, double u, clprobdistStatus* err);

/*! @brief @copybrief clprobdistMean()
*
*  @see clprobdistLognormalMeanWithObject()
*
*  @param[in]  mu	Value of the scale parameter \f$\mu\f$.
*  @param[in]  sigma	Value of the shape parameter \f$\sigma\f$.
*  @param[out] err     Error status variable, or \c NULL.
*  @return	Mean of the distribution.
*/
double clprobdistLognormalMean(double mu, double sigma, clprobdistStatus* err);

/*! @brief @copybrief clprobdistVariance()
*
*  @see clprobdistLognormalVarianceWithObject()
*
*  @param[in]  mu	Value of the scale parameter \f$\mu\f$.
*  @param[in]  sigma	Value of the shape parameter \f$\sigma\f$.
*  @param[out] err     Error status variable, or \c NULL.
*  @return     Variance of the distribution.
*/
double clprobdistLognormalVariance(double mu, double sigma, clprobdistStatus* err);

/*! @brief @copybrief clprobdistStdDeviation()
*
*  @see clprobdistLognormalStdDeviationWithObject()
*
*  @param[in]  mu	Value of the scale parameter \f$\mu\f$.
*  @param[in]  sigma	Value of the shape parameter \f$\sigma\f$.
*  @param[out] err     Error status variable, or \c NULL.
*  @return     Standard deviation of the distribution.
*/
double clprobdistLognormalStdDeviation(double mu, double sigma, clprobdistStatus* err);

/*! @} */

// code that is common to host and device
#include "private/lognormal.c.h"

#if CLPROBDIST_LOGNORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_LOCAL || CLPROBDIST_LOGNORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_PRIVATE
/*! @copydoc clprobdistCopyOverFromGlobal()
 *
 *  @warning This function is available only when
 *  CLPROBDIST_LOGNORMAL_OBJ_MEM is set to @ref CLPROBDIST_MEM_TYPE_LOCAL or to
 *  @ref CLPROBDIST_MEM_TYPE_PRIVATE.
 */
clprobdistStatus clprobdistLognormalCopyOverFromGlobal(_CLPROBDIST_LOGNORMAL_OBJ_MEM clprobdistLognormal* destDist, __global const clprobdistLognormal* srcDist)
{
    //Check params
    //if (!destDist) // this test causes a bug on GPU
    //    return clprobdistSetErrorString(CLPROBDIST_INVALID_VALUE, "clprobdistLognormalCopyOverFromGlobal(): destDist cannot be NULL");
    if (!srcDist)
        return clprobdistSetErrorString(CLPROBDIST_INVALID_VALUE, "clprobdistLognormalCopyOverFromGlobal(): srcDist cannot be NULL");

    *destDist = *srcDist;

    return CLPROBDIST_SUCCESS;
}
#endif

#endif

/*
vim: ft=c.doxygen
*/
