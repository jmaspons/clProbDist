/* This file is part of clProbDist.
 *
 * Copyright 2015-2016  Pierre L'Ecuyer, Universite de Montreal and Advanced Micro Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Authors:
 *
 *   Nabil Kemerchou <kemerchn@iro.umontreal.ca>    (2015)
 *   David Munger <mungerd@iro.umontreal.ca>        (2015)
 *   Pierre L'Ecuyer <lecuyer@iro.umontreal.ca>     (2015)
 *
 */

/*! @file exponential.clh
 *  @brief Device-side API for the exponential distribution
 *
 *  In the function declarations of this file, the preprocessor symbol
 *  _CLPROBDIST_EXPONENTIAL_OBJ_MEM expands to the selected memory type for
 *  this distribution type.
 */

#pragma once
#ifndef EXPONENTIALDIST_CLH
#define EXPONENTIALDIST_CLH

#include "clProbDist.clh"
#include "continuous.clh"

#ifndef CLPROBDIST_EXPONENTIAL_OBJ_MEM
/*! @brief Type of memory to store exponential distribution objects
 *
 *  Defaults to @ref CLPROBDIST_MEM_TYPE_GLOBAL.
 *
 *  @see CLPROBDIST_MEM_TYPE_PRIVATE CLPROBDIST_MEM_TYPE_LOCAL CLPROBDIST_MEM_TYPE_CONSTANT CLPROBDIST_MEM_TYPE_GLOBAL.
 */
#define CLPROBDIST_EXPONENTIAL_OBJ_MEM CLPROBDIST_MEM_TYPE_GLOBAL
#endif

#if CLPROBDIST_EXPONENTIAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_PRIVATE
  #define _CLPROBDIST_EXPONENTIAL_OBJ_MEM
#elif CLPROBDIST_EXPONENTIAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_LOCAL
  #define _CLPROBDIST_EXPONENTIAL_OBJ_MEM __local
#elif CLPROBDIST_EXPONENTIAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_GLOBAL
  #define _CLPROBDIST_EXPONENTIAL_OBJ_MEM __global
#elif CLPROBDIST_EXPONENTIAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_CONSTANT
  #define _CLPROBDIST_EXPONENTIAL_OBJ_MEM __constant
#else
  #error Invalid value for CLPROBDIST_EXPONENTIAL_OBJ_MEM
#endif

struct _clprobdistExponential;

/*! @brief Exponential distribution object [**device**]
 *
 *  A structure that represents an exponential distribution object.
 */
typedef struct _clprobdistExponential clprobdistExponential;


/*! @name Functions for use with a distribution object
 *
 * @{
 */

/*! @copydoc clprobdistDensityWithObject()
 */
double clprobdistExponentialDensityWithObject(_CLPROBDIST_EXPONENTIAL_OBJ_MEM const clprobdistExponential* dist, double x, clprobdistStatus* err);

/*! @copydoc clprobdistCDFWithObject()
 */
double clprobdistExponentialCDFWithObject(_CLPROBDIST_EXPONENTIAL_OBJ_MEM const clprobdistExponential* dist, double x, clprobdistStatus* err);

/*! @copydoc clprobdistComplCDFWithObject()
 */
double clprobdistExponentialComplCDFWithObject(_CLPROBDIST_EXPONENTIAL_OBJ_MEM const clprobdistExponential* dist, double x, clprobdistStatus* err);

/*! @copydoc clprobdistInverseCDFWithObject()
 */
double clprobdistExponentialInverseCDFWithObject(_CLPROBDIST_EXPONENTIAL_OBJ_MEM const clprobdistExponential* dist, double u, clprobdistStatus* err);


/*! @copydoc clprobdistMeanWithObject()
 */
double clprobdistExponentialMeanWithObject(_CLPROBDIST_EXPONENTIAL_OBJ_MEM const clprobdistExponential* dist, clprobdistStatus* err);

/*! @copydoc clprobdistVarianceWithObject()
 */
double clprobdistExponentialVarianceWithObject(_CLPROBDIST_EXPONENTIAL_OBJ_MEM const clprobdistExponential* dist, clprobdistStatus* err);

/*! @copydoc clprobdistStdDeviationWithObject()
 */
double clprobdistExponentialStdDeviationWithObject(_CLPROBDIST_EXPONENTIAL_OBJ_MEM const clprobdistExponential* dist, clprobdistStatus* err);

/*! @brief Return the value of the inverse mean \f$\lambda\f$  [**device**]
 */
double clprobdistExponentialGetLambda(_CLPROBDIST_EXPONENTIAL_OBJ_MEM const clprobdistExponential* dist, clprobdistStatus* err);

/*! @brief Change the value of the inverse mean \f$\lambda\f$  [**device**]
 */
clprobdistStatus clprobdistExponentialSetLambda(_CLPROBDIST_EXPONENTIAL_OBJ_MEM clprobdistExponential* dist, double newlambda);

/*! @} */


/*! @name Functions for use with explicit distribution parameters
 *
 *  @{
 */

/*! @brief @copybrief clprobdistDensity()
 *
 *  @see clprobdistExponentialDensityWithObject()
 *
 *  @param[in]  lambda  Value of the inverse mean \f$\lambda\f$.
 *  @param[in]  x       Value of \f$x\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Value of \f$f(x)\f$.
 */
double clprobdistExponentialDensity(double lambda, double x, clprobdistStatus* err);

/*! @brief @copybrief clprobdistCDF()
 *
 *  @see clprobdistExponentialCDFWithObject()
 *
 *  @param[in]  lambda  Value of the inverse mean \f$\lambda\f$.
 *  @param[in]  x       Value of \f$x\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Value of \f$F(x)\f$.
 */
double clprobdistExponentialCDF(double lambda, double x, clprobdistStatus* err);

/*! @brief @copybrief clprobdistComplCDF()
 *
 *  @see clprobdistExponentialComplCDFWithObject()
 *
 *  @param[in]  lambda  Value of the inverse mean \f$\lambda\f$.
 *  @param[in]  x       Value of \f$x\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Value of \f$\bar F(x)\f$.
 */
double clprobdistExponentialComplCDF(double lambda, double x, clprobdistStatus* err);

/*! @brief @copybrief clprobdistInverseCDF()
 *
 *  @see clprobdistExponentialInverseCDFWithObject()
 *
 *  @param[in]  lambda  Value of the inverse mean \f$\lambda\f$.
 *  @param[in]  u       Value of \f$u \in [0,1]\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Value of \f$F^{-1}(u)\f$.
 */
double clprobdistExponentialInverseCDF(double lambda, double u, clprobdistStatus* err);

/*! @brief @copybrief clprobdistMean()
 *
 *  @see clprobdistExponentialMeanWithObject()
 *
 *  @param[in]  lambda  Value of the inverse mean \f$\lambda\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Mean of the distribution.
 */
double clprobdistExponentialMean(double lambda, clprobdistStatus* err);

/*! @brief @copybrief clprobdistVariance()
 *
 *  @see clprobdistExponentialVarianceWithObject()
 *
 *  @param[in]  lambda  Value of the inverse mean \f$\lambda\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Variance of the distribution.
 */
double clprobdistExponentialVariance(double lambda, clprobdistStatus* err);

/*! @brief @copybrief clprobdistStdDeviation()
 *
 *  @see clprobdistExponentialStdDeviationWithObject()
 *
 *  @param[in]  lambda  Value of the inverse mean \f$\lambda\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Standard deviation of the distribution.
 */
double clprobdistExponentialStdDeviation(double lambda, clprobdistStatus* err);

/*! @} */


// code that is common to host and device
#include "private/exponential.c.h"


#if CLPROBDIST_EXPONENTIAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_LOCAL || CLPROBDIST_EXPONENTIAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_PRIVATE
/*! @copydoc clprobdistCopyOverFromGlobal()
 *
 *  @warning This function is available only when
 *  CLPROBDIST_EXPONENTIAL_OBJ_MEM is set to @ref CLPROBDIST_MEM_TYPE_LOCAL or to
 *  @ref CLPROBDIST_MEM_TYPE_PRIVATE.
 */
clprobdistStatus clprobdistExponentialCopyOverFromGlobal(_CLPROBDIST_EXPONENTIAL_OBJ_MEM clprobdistExponential* destDist, __global const clprobdistExponential* srcDist)
{
    //Check params
    //if (!destDist) // this test causes a bug on GPU
    //    return clprobdistSetErrorString(CLPROBDIST_INVALID_VALUE, "clprobdistExponentialCopyOverFromGlobal(): destDist cannot be NULL");
    if (!srcDist)
        return clprobdistSetErrorString(CLPROBDIST_INVALID_VALUE, "clprobdistExponentialCopyOverFromGlobal(): srcDist cannot be NULL");

    *destDist = *srcDist;

    return CLPROBDIST_SUCCESS;
}
#endif

#endif

/*
vim: ft=c.doxygen sw=4
*/
