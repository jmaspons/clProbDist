/* This file is part of clProbDist.
 *
 * Copyright 2015-2016  Pierre L'Ecuyer, Universite de Montreal and Advanced Micro Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Authors:
 *
 *   Nabil Kemerchou <kemerchn@iro.umontreal.ca>    (2015)
 *   David Munger <mungerd@iro.umontreal.ca>        (2015)
 *   Pierre L'Ecuyer <lecuyer@iro.umontreal.ca>     (2015)
 *
 */

/*! @file normal.clh
 *  @brief Device-side API for the normal distribution
 *
 *  In the function declarations of this file, the preprocessor symbol
 *  _CLPROBDIST_NORMAL_OBJ_MEM expands to the selected memory type for
 *  this distribution type.
 */
#pragma once
#ifndef NORMALDIST_CLH
#define NORMALDIST_CLH

#include "clProbDist.clh"
#include "continuous.clh"

#ifndef CLPROBDIST_NORMAL_OBJ_MEM
/*! @brief Type of memory to store normal distribution objects
 *
 *  Defaults to @ref CLPROBDIST_MEM_TYPE_GLOBAL.
 *
 *  @see CLPROBDIST_MEM_TYPE_PRIVATE CLPROBDIST_MEM_TYPE_LOCAL CLPROBDIST_MEM_TYPE_CONSTANT CLPROBDIST_MEM_TYPE_GLOBAL.
 */
#define CLPROBDIST_NORMAL_OBJ_MEM CLPROBDIST_MEM_TYPE_GLOBAL
#endif

#if CLPROBDIST_NORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_PRIVATE
  #define _CLPROBDIST_NORMAL_OBJ_MEM
#elif CLPROBDIST_NORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_LOCAL
  #define _CLPROBDIST_NORMAL_OBJ_MEM __local
#elif CLPROBDIST_NORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_GLOBAL
  #define _CLPROBDIST_NORMAL_OBJ_MEM __global
#elif CLPROBDIST_NORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_CONSTANT
  #define _CLPROBDIST_NORMAL_OBJ_MEM __constant
#else
  #error Invalid value for CLPROBDIST_NORMAL_OBJ_MEM
#endif

/*! @brief Normal distribution object [**device**]
 *
 *  A structure that represents a normal distribution object.
 */
typedef struct _clprobdistNormal clprobdistNormal;

/*! @name Functions for standard normal distribution
 *
 *  These functions are for the normal distribution with \f$\mu = 0\f$ and
 *  \f$\sigma = 1\f$, and they take neither a distribution object nor a list of
 *  distribution parameters.
 */
/*! @{ */

/*! @copydoc clprobdistDensity
 */
double clprobdistStdNormalDensity(double x, clprobdistStatus* err);

/*! @copydoc clprobdistCDF
 */
double clprobdistStdNormalCDF(double x, clprobdistStatus* err);

/*! @copydoc clprobdistComplCDF
 */
double clprobdistStdNormalComplCDF(double x, clprobdistStatus* err);

/*! @copydoc clprobdistInverseCDF
 */
double clprobdistStdNormalInverseCDF(double u, clprobdistStatus* err);

/*! @} */

/*! @name Functions for use with a distribution object
 *
 * @{
 */

/*! @copydoc clprobdistDensityWithObject()
 */
double clprobdistNormalDensityWithObject(_CLPROBDIST_NORMAL_OBJ_MEM const clprobdistNormal* dist, double x, clprobdistStatus* err);

/*! @copydoc clprobdistCDFWithObject()
 */
double clprobdistNormalCDFWithObject(_CLPROBDIST_NORMAL_OBJ_MEM const clprobdistNormal* dist, double x, clprobdistStatus* err);

/*! @copydoc clprobdistComplCDFWithObject()
 */
double clprobdistNormalComplCDFWithObject(_CLPROBDIST_NORMAL_OBJ_MEM const clprobdistNormal* dist, double x, clprobdistStatus* err);

/*! @copydoc clprobdistInverseCDFWithObject()
 */
double clprobdistNormalInverseCDFWithObject(_CLPROBDIST_NORMAL_OBJ_MEM const clprobdistNormal* dist, double u, clprobdistStatus* err);

/*! @copydoc clprobdistMeanWithObject()
 */
double clprobdistNormalMeanWithObject(_CLPROBDIST_NORMAL_OBJ_MEM const clprobdistNormal* dist, clprobdistStatus* err);

/*! @copydoc clprobdistVarianceWithObject()
 */
double clprobdistNormalVarianceWithObject(_CLPROBDIST_NORMAL_OBJ_MEM const clprobdistNormal* dist, clprobdistStatus* err);

/*! @copydoc clprobdistStdDeviationWithObject()
 */
double clprobdistNormalStdDeviationWithObject(_CLPROBDIST_NORMAL_OBJ_MEM const clprobdistNormal* dist, clprobdistStatus* err);

/*! @brief Return the mean.
 *
 *  @param[in]  dist    Distribution object.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return Mean \f$\mu\f$.
 */
double clprobdistNormalGetMu(_CLPROBDIST_NORMAL_OBJ_MEM const clprobdistNormal* dist, clprobdistStatus* err);

/*! @brief Return the standard deviation.
 *
 *  @param[in]  dist    Distribution object.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return Standard deviation \f$\sigma\f$.
 */
double clprobdistNormalGetSigma(_CLPROBDIST_NORMAL_OBJ_MEM const clprobdistNormal* dist, clprobdistStatus* err);

/*! @} */


/*! @name Functions for use with explicit distribution parameters
 *
 *  @{
 */

/*! @brief @copybrief clprobdistDensity()
 *
 *  @see clprobdistNormalDensityWithObject()
 *
 *  @param[in]  mu	Value of the mean \f$\mu\f$.
 *  @param[in]  sigma	Value of the standard deviation \f$\sigma\f$.
 *  @param[in]  x       Value of \f$x\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Value of \f$f(x)\f$.
 */
double clprobdistNormalDensity(double mu, double sigma, double x, clprobdistStatus* err);

/*! @brief @copybrief clprobdistCDF()
 *
 *  @see clprobdistNormalCDFWithObject()
 *
 *  @param[in]  mu	Value of the mean \f$\mu\f$.
 *  @param[in]  sigma	Value of the standard deviation \f$\sigma\f$.
 *  @param[in]  x       Value of \f$x\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Value of \f$F(x)\f$.
 */
double clprobdistNormalCDF(double mu, double sigma, double x, clprobdistStatus* err);

/*! @brief @copybrief clprobdistComplCDF()
 *
 *  @see clprobdistNormalComplCDFWithObject()
 *
 *  @param[in]  mu	Value of the mean \f$\mu\f$.
 *  @param[in]  sigma	Value of the standard deviation \f$\sigma\f$.
 *  @param[in]  x       Value of \f$x\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Value of \f$\bar F(x)\f$.
 */
double clprobdistNormalComplCDF(double mu, double sigma, double x, clprobdistStatus* err);

/*! @brief @copybrief clprobdistInverseCDF()
 *
 *  @see clprobdistNormalInverseCDFWithObject()
 *
 *  @param[in]  mu	Value of the mean \f$\mu\f$.
 *  @param[in]  sigma	Value of the standard deviation \f$\sigma\f$.
 *  @param[in]  u       Value of \f$u \in [0,1]\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Value of \f$F^{-1}(u)\f$.
 */
double clprobdistNormalInverseCDF(double mu, double sigma, double u, clprobdistStatus* err);

/*! @brief @copybrief clprobdistMean()
 *
 *  @see clprobdistNormalMeanWithObject()
 *
 *  @param[in]  mu	Value of the mean \f$\mu\f$.
 *  @param[in]  sigma	Value of the standard deviation \f$\sigma\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return	Mean of the distribution.
 */
double clprobdistNormalMean(double mu, double sigma, clprobdistStatus* err);

/*! @brief @copybrief clprobdistVariance()
 *
 *  @see clprobdistNormalVarianceWithObject()
 *
 *  @param[in]  mu	Value of the mean \f$\mu\f$.
 *  @param[in]  sigma	Value of the standard deviation \f$\sigma\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Variance of the distribution.
 */
double clprobdistNormalVariance(double mu, double sigma, clprobdistStatus* err);

/*! @brief @copybrief clprobdistStdDeviation()
 *
 *  @see clprobdistNormalStdDeviationWithObject()
 *
 *  @param[in]  mu	Value of the mean \f$\mu\f$.
 *  @param[in]  sigma	Value of the standard deviation \f$\sigma\f$.
 *  @param[out] err     Error status variable, or \c NULL.
 *  @return     Standard deviation of the distribution.
 */
double clprobdistNormalStdDeviation(double mu, double sigma, clprobdistStatus* err);

/*! @} */

// code that is common to host and device
#include "private/normal.c.h"

#if CLPROBDIST_NORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_LOCAL || CLPROBDIST_NORMAL_OBJ_MEM == CLPROBDIST_MEM_TYPE_PRIVATE
/*! @copydoc clprobdistCopyOverFromGlobal()
 *
 *  @warning This function is available only on the device, and only when
 *  CLPROBDIST_NORMAL_OBJ_MEM is set to @ref CLPROBDIST_MEM_TYPE_LOCAL or to
 *  @ref CLPROBDIST_MEM_TYPE_PRIVATE.
 */
clprobdistStatus clprobdistNormalCopyOverFromGlobal(_CLPROBDIST_NORMAL_OBJ_MEM clprobdistNormal* destDist, __global const clprobdistNormal* srcDist)
{
    //Check params
    //if (!destDist) // this test causes a bug on GPU
    //    return clprobdistSetErrorString(CLPROBDIST_INVALID_VALUE, "clprobdistNormalCopyOverFromGlobal(): destDist cannot be NULL");
    if (!srcDist)
        return clprobdistSetErrorString(CLPROBDIST_INVALID_VALUE, "clprobdistNormalCopyOverFromGlobal(): srcDist cannot be NULL");

    *destDist = *srcDist;

    return CLPROBDIST_SUCCESS;
}
#endif

#endif

/*
vim: ft=c.doxygen
*/

