# ########################################################################
# Copyright 2013 Advanced Micro Devices, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ########################################################################

# List the names of common files to compile across all platforms
set( clProbDist.Source  clProbDist.c
                        private.c
                        continuous.c
                        exponential.c
                        gamma.c
                        normal.c
                        lognormal.c
                        poisson.c
                        )

if( MSVC )
    # Use C++ with Microsoft compiler
    SET_SOURCE_FILES_PROPERTIES( ${clProbDist.Source} PROPERTIES LANGUAGE CXX)
endif( )

# Windows only uses dllmain
#if( MSVC )
#  set( clProbDist.Source ${clProbDist.Source} dllmain.cpp )
#endif( )

set( clProbDist.Headers  private.h 
                         ../include/clProbDist/clProbDist.h
                         ../include/clProbDist/clProbDist.version.h
                         ../include/clProbDist/continuous.h
                         ../include/clProbDist/exponential.h
                         ../include/clProbDist/gamma.h
                         ../include/clProbDist/normal.h
                         ../include/clProbDist/lognormal.h
                         ../include/clProbDist/poisson.h
                         )

set( clProbDist.Files ${clProbDist.Source} ${clProbDist.Headers} )

# Include standard OpenCL headers
include_directories( ${OPENCL_INCLUDE_DIRS} ${PROJECT_BINARY_DIR}/include ../include )

if(BUILD_SHARED_LIBRARY)
        add_library( clProbDist SHARED ${clProbDist.Files} )
else()
        add_library( clProbDist STATIC ${clProbDist.Files} )
endif()

target_link_libraries( clProbDist ${OPENCL_LIBRARIES} )

set_target_properties( clProbDist PROPERTIES VERSION ${CLPROBDIST_VERSION} )
set_target_properties( clProbDist PROPERTIES SOVERSION ${CLPROBDIST_SOVERSION} )
set_target_properties( clProbDist PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/staging" )

if( CMAKE_COMPILER_IS_GNUCC )
        configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/clProbDist.pc.in
                        ${CMAKE_CURRENT_BINARY_DIR}/clProbDist.pc @ONLY )

        install( FILES       ${CMAKE_CURRENT_BINARY_DIR}/clProbDist.pc
                 DESTINATION lib${SUFFIX_LIB}/pkgconfig )
endif( )

# CPack configuration; include the executable into the package
install( TARGETS clProbDist
        EXPORT clProbDist-Targets
        RUNTIME DESTINATION bin${SUFFIX_BIN}
        LIBRARY DESTINATION lib${SUFFIX_LIB}
        ARCHIVE DESTINATION lib${SUFFIX_LIB}/import
        )
        
# CMake config files for clProbDist
include( CMakePackageConfigHelpers )

set( LIB_INSTALL_DIR lib${SUFFIX_LIB} )
set( INCLUDE_INSTALL_DIR include )
set( ConfigPackageLocation ${LIB_INSTALL_DIR}/cmake/clProbDist )

configure_package_config_file(
  clProbDistConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/clProbDistConfig.cmake
  INSTALL_DESTINATION ${ConfigPackageLocation}
  PATH_VARS INCLUDE_INSTALL_DIR LIB_INSTALL_DIR
)

write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/clProbDistConfigVersion.cmake
  VERSION ${CLPROBDIST_VERSION}
  COMPATIBILITY SameMajorVersion
)

# This generates the files that defines the import targets
install( EXPORT clProbDist-Targets
  DESTINATION
    ${ConfigPackageLocation}
)

#Copy the config files generated by configure_package_config_file & write_basic_package_version_file
install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/clProbDistConfig.cmake
  ${CMAKE_CURRENT_BINARY_DIR}/clProbDistConfigVersion.cmake
  DESTINATION
    ${ConfigPackageLocation} )

# For debug builds, include the debug runtimes into the package for testing on non-developer machines
set( CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP true )
set( CMAKE_INSTALL_DEBUG_LIBRARIES true )
set( CMAKE_INSTALL_DEBUG_LIBRARIES_ONLY true )

if( WIN32 )
        set( CLPROBDIST_RUNTIME_DESTINATION bin${SUFFIX_BIN} )
else( )
        set( CLPROBDIST_RUNTIME_DESTINATION lib${SUFFIX_LIB} )
endif( )

include( InstallRequiredSystemLibraries )

# Install necessary runtime files for debug builds
install(    PROGRAMS ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS}
            CONFIGURATIONS Debug
            DESTINATION ${CLPROBDIST_RUNTIME_DESTINATION} )

# Install all *.pdb files for debug builds
install(    DIRECTORY ${PROJECT_BINARY_DIR}/staging/
            DESTINATION ${CLPROBDIST_RUNTIME_DESTINATION}
            OPTIONAL
            CONFIGURATIONS Debug
            FILES_MATCHING PATTERN "*.pdb" )

# Install a snapshot of the source as it was for this build; useful for the .pdb's
install(    DIRECTORY ${PROJECT_SOURCE_DIR}
            DESTINATION ${CLPROBDIST_RUNTIME_DESTINATION}
            OPTIONAL
            CONFIGURATIONS Debug )
